// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using amorphie.tag.data;

#nullable disable

namespace amorphie.tag.data.Migrations
{
    [DbContext(typeof(TagDBContext))]
    [Migration("20230531090608_addguid")]
    partial class addguid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9f909b0-6afc-4932-ba84-68ed5260acca"),
                            CreatedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6664),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Domain 1 Description",
                            ModifiedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6667),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Domain 1"
                        },
                        new
                        {
                            Id = new Guid("5b2bdd78-083f-41cc-a1d3-c02ebf0b347b"),
                            CreatedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6671),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Domain 2 Description",
                            ModifiedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6672),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Domain 2"
                        });
                });

            modelBuilder.Entity("Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("Entities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7597240a-b917-4e4a-874f-a24efd2af0c8"),
                            CreatedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6732),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Entity 1 Description",
                            DomainId = new Guid("c9f909b0-6afc-4932-ba84-68ed5260acca"),
                            ModifiedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6733),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Entity 1"
                        },
                        new
                        {
                            Id = new Guid("d72db8e1-d3a0-4930-95a4-c0b0b25ce9c5"),
                            CreatedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6745),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Entity 2 Description",
                            DomainId = new Guid("5b2bdd78-083f-41cc-a1d3-c02ebf0b347b"),
                            ModifiedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6745),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Entity 2"
                        });
                });

            modelBuilder.Entity("EntityData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int?>("Ttl")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0046cda7-975c-4459-a850-b913f781b5e5"),
                            CreatedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6761),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EntityId = new Guid("7597240a-b917-4e4a-874f-a24efd2af0c8"),
                            Field = "Field 1",
                            ModifiedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6761),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Ttl = 10
                        },
                        new
                        {
                            Id = new Guid("361b7b37-cdc6-46e4-90e1-0cf9a3feb1de"),
                            CreatedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6766),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EntityId = new Guid("d72db8e1-d3a0-4930-95a4-c0b0b25ce9c5"),
                            Field = "Field 2",
                            ModifiedAt = new DateTime(2023, 5, 31, 9, 6, 8, 383, DateTimeKind.Utc).AddTicks(6766),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Ttl = 20
                        });
                });

            modelBuilder.Entity("Entity", b =>
                {
                    b.HasOne("Domain", "Domain")
                        .WithMany("Entities")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("EntityData", b =>
                {
                    b.HasOne("Entity", "Entity")
                        .WithMany("Data")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Entity", b =>
                {
                    b.Navigation("Data");
                });
#pragma warning restore 612, 618
        }
    }
}
