// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using amorphie.tag.data;

#nullable disable

namespace amorphie.tag.data.Migrations
{
    [DbContext(typeof(TagDBContext))]
    partial class TagDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed86fc30-3c75-4f92-bfdd-6c0f6da7c312"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1079),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Domain 1 Description",
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1083),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Domain 1"
                        },
                        new
                        {
                            Id = new Guid("3d1c22f3-0eab-4cce-a84b-b4935eee0174"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1088),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Domain 2 Description",
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1088),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Domain 2"
                        });
                });

            modelBuilder.Entity("Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("Entities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01792b0e-9222-4db1-8252-a51fea854aec"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1134),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Entity 1 Description",
                            DomainId = new Guid("ed86fc30-3c75-4f92-bfdd-6c0f6da7c312"),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1134),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Entity 1"
                        },
                        new
                        {
                            Id = new Guid("1f52f355-ae95-42f3-80f8-72c573c06dbc"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1152),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Entity 2 Description",
                            DomainId = new Guid("3d1c22f3-0eab-4cce-a84b-b4935eee0174"),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1152),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Entity 2"
                        });
                });

            modelBuilder.Entity("EntityData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int?>("Ttl")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba80cc5d-07cc-4732-b909-e68a0bbf9c24"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1190),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EntityId = new Guid("01792b0e-9222-4db1-8252-a51fea854aec"),
                            Field = "Field 1",
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1190),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Ttl = 10
                        },
                        new
                        {
                            Id = new Guid("c61db5d9-424d-4667-87fd-02eb69a7ecf5"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1195),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EntityId = new Guid("1f52f355-ae95-42f3-80f8-72c573c06dbc"),
                            Field = "Field 2",
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1195),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Ttl = 20
                        });
                });

            modelBuilder.Entity("EntityDataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("DataPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EntityDataId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityDataId");

                    b.HasIndex("TagId");

                    b.ToTable("EntityDataSource");

                    b.HasData(
                        new
                        {
                            Id = new Guid("352a0379-f03e-4af5-b9ae-f9433678ae95"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1218),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DataPath = "Path 1",
                            EntityDataId = new Guid("ba80cc5d-07cc-4732-b909-e68a0bbf9c24"),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1218),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("12c05a71-1b0c-40bd-a811-4e5111384516"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1227),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DataPath = "Path 2",
                            EntityDataId = new Guid("c61db5d9-424d-4667-87fd-02eb69a7ecf5"),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1227),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Order = 2
                        });
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Ttl")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("717e1acd-0984-4f10-b5c7-331b0704e7b6"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1252),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1255),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1252),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Tag 1",
                            Ttl = 30,
                            Url = "URL 1"
                        },
                        new
                        {
                            Id = new Guid("89f6ece4-69eb-471a-a6e4-3b2b95f8ac61"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1261),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1263),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1261),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Tag 2",
                            Ttl = 40,
                            Url = "URL 2"
                        });
                });

            modelBuilder.Entity("TagRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("TagRelations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b73d23de-5e4a-4bef-ac9a-dfa4293d9ac5"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1281),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1281),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            OwnerName = "Owner 1",
                            TagId = new Guid("717e1acd-0984-4f10-b5c7-331b0704e7b6"),
                            TagName = ""
                        },
                        new
                        {
                            Id = new Guid("75d61865-189d-4fcb-91ef-f5a3deaa997b"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1289),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1290),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            OwnerName = "Owner 2",
                            TagId = new Guid("89f6ece4-69eb-471a-a6e4-3b2b95f8ac61"),
                            TagName = ""
                        });
                });

            modelBuilder.Entity("View", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("ViewTemplateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("Views");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d93c87c-f2ee-4839-a795-5b2d4c494672"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1313),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1314),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            TagId = new Guid("717e1acd-0984-4f10-b5c7-331b0704e7b6"),
                            TagName = "",
                            Type = 0,
                            ViewTemplateName = "View 1"
                        },
                        new
                        {
                            Id = new Guid("67e3776e-033e-4ce5-8a55-cabf3fa8ec27"),
                            CreatedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1318),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedAt = new DateTime(2023, 6, 1, 11, 6, 28, 147, DateTimeKind.Utc).AddTicks(1318),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            TagId = new Guid("89f6ece4-69eb-471a-a6e4-3b2b95f8ac61"),
                            TagName = "",
                            Type = 5,
                            ViewTemplateName = "View 2"
                        });
                });

            modelBuilder.Entity("Entity", b =>
                {
                    b.HasOne("Domain", "Domain")
                        .WithMany("Entities")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("EntityData", b =>
                {
                    b.HasOne("Entity", "Entity")
                        .WithMany("Data")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("EntityDataSource", b =>
                {
                    b.HasOne("EntityData", "EntityData")
                        .WithMany("Sources")
                        .HasForeignKey("EntityDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("EntityData");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TagRelation", b =>
                {
                    b.HasOne("Tag", "Tag")
                        .WithMany("TagsRelations")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("View", b =>
                {
                    b.HasOne("Tag", "Tag")
                        .WithMany("Views")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Entity", b =>
                {
                    b.Navigation("Data");
                });

            modelBuilder.Entity("EntityData", b =>
                {
                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.Navigation("TagsRelations");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
